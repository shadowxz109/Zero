<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shadowxz.dao.PostDao" >
  <resultMap id="BaseResultMap" type="Post" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="section_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="title" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="pulish_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="reply_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="read_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="reply_number" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMap" type="Post" >
    <result property="id" column="id" />
    <result property="sectionId" column="section_id" />
    <result property="userId" column="user_id" />
    <result property="title" column="title" />
    <result property="pulishTime" column="pulish_time" />
    <result property="replyTime" column="reply_time" />
    <result property="readNumber" column="read_number" />
    <result property="replyNumber" column="reply_number" />
    <result property="content" column="content" />
    <association property="postUser" javaType="User">
      <result property="userName" column="post_user_name" />
      <result property="imageUrl" column="post_user_image_url" />
    </association>
  </resultMap>
  <resultMap id="ResultMapWithReplies" type="Post" >
    <result property="id" column="id" />
    <result property="sectionId" column="section_id" />
    <result property="userId" column="user_id" />
    <result property="title" column="title" />
    <result property="pulishTime" column="pulish_time" />
    <result property="replyTime" column="reply_time" />
    <result property="readNumber" column="read_number" />
    <result property="replyNumber" column="reply_number" />
    <result property="content" column="content" />
    <association property="postUser" javaType="User">
        <result property="userName" column="post_user_name" />
        <result property="imageUrl" column="post_user_image_url" />
    </association>
    <collection property="replies" ofType="Reply" >
        <result property="id" column="reply_id" />
        <result property="userId" column="reply_user_id" />
        <result property="content" column="reply_content" />
        <result property="replyTime" column="reply_reply_time" />
        <association property="replyUser" javaType="User">
            <result property="userName" column="reply_user_name" />
            <result property="imageUrl" column="reply_user_image_url" />
        </association>
        <collection property="dialogues" ofType="Dialogue" >
          <result property="id" column="dialogue_id" />
          <result property="sendUserId" column="send_user_id" />
          <result property="content" column="dialogue_content" />
          <result property="sendTime" column="dialogue_send_time" />
          <result property="receiveUserId" column="receive_user_id" />
          <association property="sendUser" javaType="User">
            <result property="userName" column="send_user_name"/>
          </association>
          <association property="receiveUser" javaType="User">
            <result property="userName" column="receive_user_name"/>
          </association>
        </collection>
    </collection>
  </resultMap>
  <sql id="Base_Column_List" >
    id, section_id, user_id, title, pulish_time ,content ,reply_time, read_number, reply_number
  </sql>

  <select id="selectByPrimaryKey" resultMap="ResultMapWithReplies" parameterType="java.util.Map" >
    SELECT P1.id AS id,
      P1.section_id AS section_id,
      P1.user_id AS user_id,
      P1.title AS title,
      pulish_time,reply_time,read_number,reply_number,
      P1.content AS content,
      post_user_name,post_user_image_url,
      P1.reply_id AS reply_id,
      reply_content,reply_reply_time,reply_user_id,reply_user_name,reply_user_image_url,
      D1.id AS dialogue_id,
      D1.content AS dialogue_content,
      D1.send_time AS dialogue_send_time,
      D1.send_user_id AS send_user_id,
      D1.receive_user_id AS receive_user_id,
      U3.id AS send_user_id,
      u3.user_name AS send_user_name,
      U4.id AS receive_user_id,
      u4.user_name AS receive_user_name
	 FROM (SELECT
	  P.id AS id,
      P.section_id AS section_id,
      P.user_id AS user_id,
      P.title AS title,
      P.pulish_time AS pulish_time,
      P.reply_time AS reply_time,
      P.read_number AS read_number,
      P.reply_number AS reply_number,
      P.content AS content,
      U1.user_name AS post_user_name,
      U1.image_url AS post_user_image_url,
      R1.id AS reply_id,
      R1.content AS reply_content,
      R1.reply_time AS reply_reply_time,
      R1.user_id AS reply_user_id,
      U2.user_name AS reply_user_name,
      U2.image_url AS reply_user_image_url
	  FROM post P
            LEFT JOIN user U1 ON P.user_id = U1.id
            LEFT JOIN reply R1 ON R1.post_id = P.id
            LEFT JOIN user U2 ON R1.user_id = U2.id
          WHERE P.id = #{id,jdbcType=INTEGER}
          LIMIT #{offset,jdbcType=INTEGER},10) P1
         LEFT JOIN dialogue D1 ON D1.reply_id = P1.reply_id
         LEFT JOIN user U3 ON D1.send_user_id = U3.id
         LEFT JOIN user U4 ON D1.receive_user_id = U4.id
  </select>

  <select id="selectAllPosts" resultMap="ResultMap" parameterType="int">
    SELECT P.id AS id,
    P.section_id AS section_id,
    P.user_id AS user_id,
    P.title AS title,
    P.pulish_time AS pulish_time,
    P.reply_time AS reply_time,
    P.read_number AS read_number,
    P.reply_number AS reply_number,
    P.content AS content,
    U.user_name AS post_user_name,
    U.image_url AS post_user_image_url
    FROM post P
      LEFT JOIN user U ON P.user_id = U.id
    ORDER BY P.id DESC
    LIMIT #{offset,jdbcType=INTEGER},10
  </select>

  <select id="selectBaseByPrimaryKey" resultMap="ResultMap" parameterType="int">
    SELECT P.id AS id,
    section_id,user_id,title,pulish_time,reply_time,read_number,reply_number,content,
    U.user_name AS post_user_name,
     U.image_url AS post_user_image_url
    FROM post P
    LEFT JOIN user U ON P.user_id = U.id
    WHERE P.id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectUnreadRepliesByUserId" resultMap="ResultMapWithReplies" parameterType="java.lang.Integer">
     SELECT
     P.id AS id,
     P.content AS content,
     R.id AS reply_id,
     R.content AS reply_content,
     R.user_id AS reply_user_id,
     U.user_name AS reply_user_name
     FROM post P
     LEFT JOIN reply R ON P.id = R.post_id
     LEFT JOIN user U ON U.id = R.user_id
     WHERE R.state = 0 AND P.user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectUnreadDialoguesByUserId" resultMap="ResultMapWithReplies" parameterType="java.lang.Integer">
     SELECT
     P.id AS id,
     P.content AS content,
     R.id AS reply_id,
     D.content AS dialogue_content,
     D.id AS send_user_id,
     U.user_name AS send_user_name
     FROM post P
     LEFT JOIN reply R ON P.id = R.post_id
     LEFT JOIN dialogue D ON D.reply_id = R.id
     LEFT JOIN user U ON U.id = D.send_user_id
     WHERE D.reply_read = 0 AND R.user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectUnreadDialoguesP2PByUserId" resultMap="ResultMapWithReplies" parameterType="java.lang.Integer">
      SELECT
      P.id AS id,
      P.content AS content,
      R.id AS reply_id,
      D.content AS dialogue_content,
      D.id AS send_user_id,
      U.user_name AS send_user_name
      FROM post P
      LEFT JOIN reply R ON P.id = R.post_id
      LEFT JOIN dialogue D ON D.reply_id = R.id
      LEFT JOIN user U ON U.id = D.send_user_id
      WHERE D.receive_read = 0 AND D.receive_user_id = #{userId,jdbcType=INTEGER}
  </select>


    <select id="selectNewPosts" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM post
    ORDER BY id DESC
    LIMIT 0,5
  </select>

  <select id="selectPostsBySectionId" resultMap="ResultMap" parameterType="java.util.Map">
    SELECT P.id AS id,
    P.section_id AS section_id,
      P.user_id AS user_id,
      P.title AS title,
      P.pulish_time AS pulish_time,
      P.reply_time AS reply_time,
      P.read_number AS read_number,
      P.reply_number AS reply_number,
      P.content AS content,
      U.user_name AS post_user_name,
      U.image_url AS post_user_image_url
    FROM post P
    LEFT JOIN user U ON P.user_id = U.id
    WHERE P.section_id = #{sectionId,jdbcType=INTEGER}
    ORDER BY P.reply_time DESC
    LIMIT #{offset,jdbcType=INTEGER},10
  </select>

  <select id="selectPostsByUserId" resultMap="BaseResultMap" parameterType="java.util.Map">
    SELECT
    <include refid="Base_Column_List" />
    FROM post
    WHERE user_id = #{userId,jdbcType=INTEGER}
    LIMIT #{offset,jdbcType=INTEGER}
  </select>

  <select id="countPostsNumberBySectionId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT
    COUNT(*) FROM post
    WHERE section_id = #{sectionId,jdbcType=INTEGER}
  </select>

  <select id="countPostsNumber" resultType="java.lang.Integer">
    SELECT
    COUNT(*) FROM post
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from post
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="Post" >
    <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
      SELECT LAST_INSERT_ID() AS id
    </selectKey>
    insert into post (section_id, user_id,
      title, pulish_time, reply_time, 
      read_number, reply_number, content
      )
    values (#{sectionId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
      #{title,jdbcType=VARCHAR}, #{pulishTime,jdbcType=TIMESTAMP}, #{replyTime,jdbcType=TIMESTAMP},
      #{readNumber,jdbcType=INTEGER}, #{replyNumber,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="Post" >
    insert into post
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="sectionId != null" >
        section_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="pulishTime != null" >
        pulish_time,
      </if>
      <if test="replyTime != null" >
        reply_time,
      </if>
      <if test="readNumber != null" >
        read_number,
      </if>
      <if test="replyNumber != null" >
        reply_number,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="sectionId != null" >
        #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="pulishTime != null" >
        #{pulishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyTime != null" >
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="readNumber != null" >
        #{readNumber,jdbcType=INTEGER},
      </if>
      <if test="replyNumber != null" >
        #{replyNumber,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="Post" >
    update post
    <set >
      <if test="sectionId != null" >
        section_id = #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="pulishTime != null" >
        pulish_time = #{pulishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="replyTime != null" >
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="readNumber != null" >
        read_number = #{readNumber,jdbcType=INTEGER},
      </if>
      <if test="replyNumber != null" >
        reply_number = #{replyNumber,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="increaseReadNumberById" parameterType="java.lang.Integer" >
    UPDATE post
    SET read_number = read_number + 1
    WHERE id = #{id,jdbcType=INTEGER}
  </update>

  <update id="increaseReplyNumberById" parameterType="java.lang.Integer" >
    UPDATE post
    SET reply_number = reply_number + 1
    WHERE id = #{id,jdbcType=INTEGER}
  </update>

  <update id="decreaseReplyNumberById" parameterType="java.lang.Integer" >
    UPDATE post
    SET reply_number = reply_number - 1
    WHERE id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="Post" >
    update post
    set section_id = #{sectionId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      pulish_time = #{pulishTime,jdbcType=TIMESTAMP},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      read_number = #{readNumber,jdbcType=INTEGER},
      reply_number = #{replyNumber,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="Post" >
    update post
    set section_id = #{sectionId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      pulish_time = #{pulishTime,jdbcType=TIMESTAMP},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      read_number = #{readNumber,jdbcType=INTEGER},
      reply_number = #{replyNumber,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>